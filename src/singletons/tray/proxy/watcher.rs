// This code was autogenerated with `dbus-codegen-rust --crossroads -d org.kde.StatusNotifierWatcher -p /StatusNotifierWatcher`, see https://github.com/diwic/dbus-rs
use dbus as dbus;
#[allow(unused_imports)]
use dbus::arg;
use dbus_crossroads as crossroads;

pub trait OrgFreedesktopDBusProperties {
    fn get(&mut self, interface_name: String, property_name: String) -> Result<arg::Variant<Box<dyn arg::RefArg + 'static>>, dbus::MethodErr>;
    fn get_all(&mut self, interface_name: String) -> Result<arg::PropMap, dbus::MethodErr>;
    fn set(&mut self, interface_name: String, property_name: String, value: arg::Variant<Box<dyn arg::RefArg + 'static>>) -> Result<(), dbus::MethodErr>;
}

#[derive(Debug)]
pub struct OrgFreedesktopDBusPropertiesPropertiesChanged {
    pub interface_name: String,
    pub changed_properties: arg::PropMap,
    pub invalidated_properties: Vec<String>,
}

impl arg::AppendAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.interface_name, i);
        arg::RefArg::append(&self.changed_properties, i);
        arg::RefArg::append(&self.invalidated_properties, i);
    }
}

impl arg::ReadAll for OrgFreedesktopDBusPropertiesPropertiesChanged {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgFreedesktopDBusPropertiesPropertiesChanged {
            interface_name: i.read()?,
            changed_properties: i.read()?,
            invalidated_properties: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgFreedesktopDBusPropertiesPropertiesChanged {
    const NAME: &'static str = "PropertiesChanged";
    const INTERFACE: &'static str = "org.freedesktop.DBus.Properties";
}

pub fn register_org_freedesktop_dbus_properties<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where T: OrgFreedesktopDBusProperties + Send + 'static
{
    cr.register("org.freedesktop.DBus.Properties", |b| {
        b.signal::<(String,arg::PropMap,Vec<String>,), _>("PropertiesChanged", ("interface_name","changed_properties","invalidated_properties",));
        b.method("Get", ("interface_name","property_name",), ("value",), |_, t: &mut T, (interface_name,property_name,)| {
            t.get(interface_name,property_name,)
                .map(|x| (x,))
        });
        b.method("GetAll", ("interface_name",), ("properties",), |_, t: &mut T, (interface_name,)| {
            t.get_all(interface_name,)
                .map(|x| (x,))
        });
        b.method("Set", ("interface_name","property_name","value",), (), |_, t: &mut T, (interface_name,property_name,value,)| {
            t.set(interface_name,property_name,value,)
        });
    })
}

pub trait OrgFreedesktopDBusIntrospectable {
    fn introspect(&mut self) -> Result<String, dbus::MethodErr>;
}

pub fn register_org_freedesktop_dbus_introspectable<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where T: OrgFreedesktopDBusIntrospectable + Send + 'static
{
    cr.register("org.freedesktop.DBus.Introspectable", |b| {
        b.method("Introspect", (), ("xml_data",), |_, t: &mut T, ()| {
            t.introspect()
                .map(|x| (x,))
        });
    })
}

pub trait OrgFreedesktopDBusPeer {
    fn ping(&mut self) -> Result<(), dbus::MethodErr>;
    fn get_machine_id(&mut self) -> Result<String, dbus::MethodErr>;
}

pub fn register_org_freedesktop_dbus_peer<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where T: OrgFreedesktopDBusPeer + Send + 'static
{
    cr.register("org.freedesktop.DBus.Peer", |b| {
        b.method("Ping", (), (), |_, t: &mut T, ()| {
            t.ping()
        });
        b.method("GetMachineId", (), ("machine_uuid",), |_, t: &mut T, ()| {
            t.get_machine_id()
                .map(|x| (x,))
        });
    })
}

pub trait OrgKdeStatusNotifierWatcher {
    fn register_status_notifier_item(&mut self, service: String) -> Result<(), dbus::MethodErr>;
    fn register_status_notifier_host(&mut self, service: String) -> Result<(), dbus::MethodErr>;
    fn registered_status_notifier_items(&self) -> Result<Vec<String>, dbus::MethodErr>;
    fn is_status_notifier_host_registered(&self) -> Result<bool, dbus::MethodErr>;
    fn protocol_version(&self) -> Result<i32, dbus::MethodErr>;
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierWatcherStatusNotifierItemRegistered {
    pub service: String,
}

impl arg::AppendAll for OrgKdeStatusNotifierWatcherStatusNotifierItemRegistered {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.service, i);
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierWatcherStatusNotifierItemRegistered {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierWatcherStatusNotifierItemRegistered {
            service: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierWatcherStatusNotifierItemRegistered {
    const NAME: &'static str = "StatusNotifierItemRegistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierWatcherStatusNotifierItemUnregistered {
    pub service: String,
}

impl arg::AppendAll for OrgKdeStatusNotifierWatcherStatusNotifierItemUnregistered {
    fn append(&self, i: &mut arg::IterAppend) {
        arg::RefArg::append(&self.service, i);
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierWatcherStatusNotifierItemUnregistered {
    fn read(i: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierWatcherStatusNotifierItemUnregistered {
            service: i.read()?,
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierWatcherStatusNotifierItemUnregistered {
    const NAME: &'static str = "StatusNotifierItemUnregistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierWatcherStatusNotifierHostRegistered {
}

impl arg::AppendAll for OrgKdeStatusNotifierWatcherStatusNotifierHostRegistered {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierWatcherStatusNotifierHostRegistered {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierWatcherStatusNotifierHostRegistered {
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierWatcherStatusNotifierHostRegistered {
    const NAME: &'static str = "StatusNotifierHostRegistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

#[derive(Debug)]
pub struct OrgKdeStatusNotifierWatcherStatusNotifierHostUnregistered {
}

impl arg::AppendAll for OrgKdeStatusNotifierWatcherStatusNotifierHostUnregistered {
    fn append(&self, _: &mut arg::IterAppend) {
    }
}

impl arg::ReadAll for OrgKdeStatusNotifierWatcherStatusNotifierHostUnregistered {
    fn read(_: &mut arg::Iter) -> Result<Self, arg::TypeMismatchError> {
        Ok(OrgKdeStatusNotifierWatcherStatusNotifierHostUnregistered {
        })
    }
}

impl dbus::message::SignalArgs for OrgKdeStatusNotifierWatcherStatusNotifierHostUnregistered {
    const NAME: &'static str = "StatusNotifierHostUnregistered";
    const INTERFACE: &'static str = "org.kde.StatusNotifierWatcher";
}

pub fn register_org_kde_status_notifier_watcher<T>(cr: &mut crossroads::Crossroads) -> crossroads::IfaceToken<T>
where T: OrgKdeStatusNotifierWatcher + Send + 'static
{
    cr.register("org.kde.StatusNotifierWatcher", |b| {
        b.signal::<(String,), _>("StatusNotifierItemRegistered", ("service",));
        b.signal::<(String,), _>("StatusNotifierItemUnregistered", ("service",));
        b.signal::<(), _>("StatusNotifierHostRegistered", ());
        b.signal::<(), _>("StatusNotifierHostUnregistered", ());
        b.method("RegisterStatusNotifierItem", ("service",), (), |_, t: &mut T, (service,)| {
            t.register_status_notifier_item(service,)
        });
        b.method("RegisterStatusNotifierHost", ("service",), (), |_, t: &mut T, (service,)| {
            t.register_status_notifier_host(service,)
        });
        b.property::<Vec<String>, _>("RegisteredStatusNotifierItems")
            .get(|_, t: &mut T| t.registered_status_notifier_items());
        b.property::<bool, _>("IsStatusNotifierHostRegistered")
            .get(|_, t: &mut T| t.is_status_notifier_host_registered());
        b.property::<i32, _>("ProtocolVersion")
            .get(|_, t: &mut T| t.protocol_version());
    })
}